class Solution(object):
    def longestConsecutive(self, nums):
        # ðŸ”¹ Step 1: Convert list to set to remove duplicates and allow O(1) lookup
        # Sets are ideal for this problem because we need to check if an element exists quickly
        setnums = set(nums)

        # ðŸ”¹ Step 2: Variable to keep track of the maximum streak found so far
        maximum = 0

        # ðŸ”¹ Step 3: Loop through each number in the set (not the original array)
        # Why the set? Because:
        #   1. It eliminates duplicates, which can create redundant checks
        #   2. We only want to process *unique* values
        for i in setnums:
            # ðŸ”¸ Key Idea: Only start counting a sequence if it's the *start* of a sequence
            # If (i - 1) exists in the set, then 'i' is not the start of a sequence
            # Example: if set contains 1, 2, 3, 4, we should only start counting from 1 (not from 2, 3, or 4)
            if i - 1 in setnums:
                continue  # Skip because this is not the beginning of a sequence

            # ðŸ”¹ At this point, 'i' is the start of a sequence
            current = i         # Track the current number in the sequence
            currlength = 1      # Every number is at least a sequence of length 1 (itself)

            # ðŸ”¸ Keep checking if the next number exists in the set (i.e., i+1, i+2, ...)
            # If it does, increment the streak length and move forward
            while current + 1 in setnums:
                current += 1
                currlength += 1

            # ðŸ”¹ Update maximum if we found a longer streak
            maximum = max(maximum, currlength)

        # ðŸ”¹ Finally, return the longest streak found
        return maximum
