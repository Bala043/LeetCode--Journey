class Solution(object):
    def twoSum(self, nums, target):
        # ðŸ”¹ Step 1: Create an empty hash map (dictionary) to store numbers and their indices
        # Key = number seen so far
        # Value = index where that number appears
        result = {}

        # ðŸ”¸ Edge case: if the list is empty, return None (no solution possible)
        if len(nums) == 0:
            return None  # Use `None` in Python instead of `null`

        # ðŸ”¹ Step 2: Traverse through the list
        for i in range(len(nums)):
            # Calculate the complement that we need to find in the map
            diff = target - nums[i]

            # ðŸ”¸ Step 3: Check if the complement is already in the map
            # If it is, we found the pair that adds up to the target
            if diff in result:
                # Return indices: current index and index of the complement
                return [i, result[diff]]

            # ðŸ”¹ Step 4: If complement is not found, store the current number and its index
            result[nums[i]] = i

        # ðŸ”¸ Step 5: If no solution found (which shouldn't happen if problem guarantees a solution)
        return None
